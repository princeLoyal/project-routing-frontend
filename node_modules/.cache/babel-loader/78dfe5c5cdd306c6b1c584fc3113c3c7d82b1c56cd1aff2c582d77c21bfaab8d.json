{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { uiActions } from './index';\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    totalQuantity: 0\n  },\n  reducers: {\n    replaceCart(state, action) {\n      state.totalQuantity = action.payload.totalQuantity;\n      state.items = action.payload.items;\n    },\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        // existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n  }\n});\n\nexport const sendCartData = cart => {\n  // return async (dispatch) => {\n  //     dispatch(uiActions.setNotification({\n  //         status:'pending',\n  //         title: 'Sending...',\n  //         message: 'Sending cart data!'\n  //     }));\n\n  //     const sendRequest = async () => {\n  //         const response = await fetch('https://react-http-c3510-default-rtdb.firebaseio.com/cart.json', {\n  //             method: 'PUT',\n  //             body: JSON.stringify(cart)\n  //         });\n\n  //         if(!response.ok){\n  //             throw new Error('Sending Cart details failed.');\n  //         };\n  //     };\n  //     try {\n  //         await sendRequest();\n  //         dispatch(uiActions.setNotification({\n  //             status:'success',\n  //             title: 'Success!',\n  //             message: 'Sent Cart data succesfully'\n  //           }));\n  //     } catch (error) {\n  //         dispatch(uiActions.setNotification({\n  //             status:'error',\n  //             title: 'Error!',\n  //             message: 'Sending Cart details failed.'\n  //           }));\n  //     }\n  // };\n};\nexport const cartActions = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","uiActions","cartSlice","name","initialState","items","totalQuantity","reducers","replaceCart","state","action","payload","addItemToCart","newItem","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","filter","sendCartData","cart","cartActions","actions","reducer"],"sources":["C:/Users/Prince/Desktop/myReactProjects/advanced-redux/src/store/cartSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport { uiActions } from './index';\r\n\r\n const cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState: {\r\n        items: [],\r\n        totalQuantity: 0\r\n    },\r\n    reducers: {\r\n      replaceCart(state, action) {\r\n         state.totalQuantity = action.payload.totalQuantity;\r\n         state.items = action.payload.items;\r\n      },\r\n        addItemToCart(state, action){\r\n            const newItem = action.payload;\r\n            const existingItem = state.items.find(item => item.id === newItem.id);\r\n            state.totalQuantity++;\r\n            if(!existingItem){\r\n                state.items.push({\r\n                    id: newItem.id, \r\n                    price: newItem.price, \r\n                    quantity: 1, \r\n                    totalPrice: newItem.price,\r\n                    name: newItem.title\r\n                })\r\n            } else {\r\n                existingItem.quantity++;\r\n                existingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n            }\r\n        },\r\n        removeItemFromCart(state, action){\r\n            const id = action.payload;\r\n            const existingItem = state.items.find(item => item.id === id);\r\n            state.totalQuantity--;\r\n            if(existingItem.quantity === 1){\r\n                state.items = state.items.filter(item => item.id !== id);\r\n            } else {\r\n                existingItem.quantity--;\r\n                // existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nexport const sendCartData = (cart) => {\r\n    // return async (dispatch) => {\r\n    //     dispatch(uiActions.setNotification({\r\n    //         status:'pending',\r\n    //         title: 'Sending...',\r\n    //         message: 'Sending cart data!'\r\n    //     }));\r\n\r\n    //     const sendRequest = async () => {\r\n    //         const response = await fetch('https://react-http-c3510-default-rtdb.firebaseio.com/cart.json', {\r\n    //             method: 'PUT',\r\n    //             body: JSON.stringify(cart)\r\n    //         });\r\n\r\n    //         if(!response.ok){\r\n    //             throw new Error('Sending Cart details failed.');\r\n    //         };\r\n    //     };\r\n    //     try {\r\n    //         await sendRequest();\r\n    //         dispatch(uiActions.setNotification({\r\n    //             status:'success',\r\n    //             title: 'Success!',\r\n    //             message: 'Sent Cart data succesfully'\r\n    //           }));\r\n    //     } catch (error) {\r\n    //         dispatch(uiActions.setNotification({\r\n    //             status:'error',\r\n    //             title: 'Error!',\r\n    //             message: 'Sending Cart details failed.'\r\n    //           }));\r\n    //     }\r\n    // };\r\n};\r\n\r\nexport const cartActions = cartSlice.actions;\r\nexport default cartSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,SAAS,QAAQ,SAAS;AAElC,MAAMC,SAAS,GAAGF,WAAW,CAAC;EAC3BG,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACVC,KAAK,EAAE,EAAE;IACTC,aAAa,EAAE;EACnB,CAAC;EACDC,QAAQ,EAAE;IACRC,WAAW,CAACC,KAAK,EAAEC,MAAM,EAAE;MACxBD,KAAK,CAACH,aAAa,GAAGI,MAAM,CAACC,OAAO,CAACL,aAAa;MAClDG,KAAK,CAACJ,KAAK,GAAGK,MAAM,CAACC,OAAO,CAACN,KAAK;IACrC,CAAC;IACCO,aAAa,CAACH,KAAK,EAAEC,MAAM,EAAC;MACxB,MAAMG,OAAO,GAAGH,MAAM,CAACC,OAAO;MAC9B,MAAMG,YAAY,GAAGL,KAAK,CAACJ,KAAK,CAACU,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKJ,OAAO,CAACI,EAAE,CAAC;MACrER,KAAK,CAACH,aAAa,EAAE;MACrB,IAAG,CAACQ,YAAY,EAAC;QACbL,KAAK,CAACJ,KAAK,CAACa,IAAI,CAAC;UACbD,EAAE,EAAEJ,OAAO,CAACI,EAAE;UACdE,KAAK,EAAEN,OAAO,CAACM,KAAK;UACpBC,QAAQ,EAAE,CAAC;UACXC,UAAU,EAAER,OAAO,CAACM,KAAK;UACzBhB,IAAI,EAAEU,OAAO,CAACS;QAClB,CAAC,CAAC;MACN,CAAC,MAAM;QACHR,YAAY,CAACM,QAAQ,EAAE;QACvBN,YAAY,CAACO,UAAU,GAAGP,YAAY,CAACO,UAAU,GAAGR,OAAO,CAACM,KAAK;MACrE;IACJ,CAAC;IACDI,kBAAkB,CAACd,KAAK,EAAEC,MAAM,EAAC;MAC7B,MAAMO,EAAE,GAAGP,MAAM,CAACC,OAAO;MACzB,MAAMG,YAAY,GAAGL,KAAK,CAACJ,KAAK,CAACU,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;MAC7DR,KAAK,CAACH,aAAa,EAAE;MACrB,IAAGQ,YAAY,CAACM,QAAQ,KAAK,CAAC,EAAC;QAC3BX,KAAK,CAACJ,KAAK,GAAGI,KAAK,CAACJ,KAAK,CAACmB,MAAM,CAACR,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;MAC5D,CAAC,MAAM;QACHH,YAAY,CAACM,QAAQ,EAAE;QACvB;MACJ;IACJ;EACJ;AACJ,CAAC,CAAC;;AAEF,OAAO,MAAMK,YAAY,GAAIC,IAAI,IAAK;EAClC;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAAA,CACH;AAED,OAAO,MAAMC,WAAW,GAAGzB,SAAS,CAAC0B,OAAO;AAC5C,eAAe1B,SAAS,CAAC2B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}